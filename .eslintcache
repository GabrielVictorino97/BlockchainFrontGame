[{"D:\\Dev\\dapp-client\\src\\index.js":"1","D:\\Dev\\dapp-client\\src\\reportWebVitals.js":"2","D:\\Dev\\dapp-client\\src\\App.js":"3","D:\\Dev\\dapp-client\\src\\blockchain\\index.js":"4","D:\\Dev\\dapp-client\\src\\store\\index.js":"5","D:\\Dev\\dapp-client\\src\\components\\GameContainer\\index.js":"6","D:\\Dev\\dapp-client\\src\\store\\ducks\\memory.js":"7","D:\\Dev\\dapp-client\\src\\store\\ducks\\index.js":"8","D:\\Dev\\dapp-client\\src\\components\\CardBoard\\index.js":"9","D:\\Dev\\dapp-client\\src\\components\\CardListView\\index.js":"10"},{"size":547,"mtime":1642121843260,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":457,"mtime":1642123648024,"results":"14","hashOfConfig":"12"},{"size":4525,"mtime":1642124201258,"results":"15","hashOfConfig":"12"},{"size":142,"mtime":1642121051197,"results":"16","hashOfConfig":"12"},{"size":2344,"mtime":1642125920151,"results":"17","hashOfConfig":"12"},{"size":2081,"mtime":1642122692349,"results":"18","hashOfConfig":"12"},{"size":127,"mtime":1642121004517,"results":"19","hashOfConfig":"12"},{"size":2608,"mtime":1642122609749,"results":"20","hashOfConfig":"12"},{"size":512,"mtime":1642121693790,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w7x9ku",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"D:\\Dev\\dapp-client\\src\\index.js",[],"D:\\Dev\\dapp-client\\src\\reportWebVitals.js",[],"D:\\Dev\\dapp-client\\src\\App.js",[],"D:\\Dev\\dapp-client\\src\\blockchain\\index.js",["46"],"import React from 'react'\r\nimport { useState, useContext } from 'react'\r\nimport Web3 from 'web3'\r\nimport MemoryToken from \"./contracts/MemoryToken.json\"\r\n\r\n\r\n// this is the equivalent to the createStore method of Redux\r\n// https://redux.js.org/api/createstore\r\n\r\nconst BlockchainContext = React.createContext();\r\n\r\nexport default BlockchainContext;\r\n\r\nexport const BlockchainProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n    const [account, setAccount] = useState()\r\n    const [balance, setBalance]  = useState(0)\r\n    const [myTokens, setMyTokens] = useState([])\r\n\r\n    const [token, setToken] = useState();\r\n\r\n    const loadWeb3 = async () => {\r\n\r\n        try{\r\n            if (window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum)\r\n                await window.ethereum.enable()\r\n                return true;\r\n            } else if (window.web3) {\r\n                window.web3 = new Web3(window.web3.currentProvider)\r\n                return true\r\n            } else {\r\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n                return false\r\n            }\r\n        } catch (err) {\r\n            window.alert('Error on login into your Wallet', err);\r\n            return false\r\n        }\r\n    }\r\n\r\n    const geMyTokensFromBlockchain = async (token, account) =>{\r\n\r\n        let balanceOf = await token.methods.balanceOf(account).call()\r\n\r\n        const blockchainTokens = []\r\n        for (let i = 0; i < balanceOf; i++) {\r\n            const id = await token.methods.tokenOfOwnerByIndex(account, i).call()\r\n            const tokenURI = await token.methods.tokenURI(id).call()\r\n\r\n            blockchainTokens.push(tokenURI)\r\n        }\r\n\r\n        setMyTokens(blockchainTokens)\r\n    }\r\n\r\n    const loadBlockchainData = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n\r\n        setAccount(accounts[0]);                \r\n\r\n        // Load smart contract\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = MemoryToken.networks[networkId]\r\n       \r\n        if(networkData) {\r\n            const abi = MemoryToken.abi\r\n            const address = networkData.address\r\n\r\n            const balance = web3.utils.fromWei(await web3.eth.getBalance(address), 'ether')\r\n            const _token = new web3.eth.Contract(abi, address)           \r\n\r\n            setToken(_token)\r\n            setBalance(balance)\r\n        \r\n            await geMyTokensFromBlockchain(_token, accounts[0]);\r\n\r\n        } else {\r\n          alert('Smart contract not deployed to detected network.')\r\n        }\r\n        \r\n      }  \r\n\r\n    async function doLogin() {\r\n        if (await loadWeb3()){\r\n            await loadBlockchainData();\r\n            setIsAuthenticated(true);\r\n        }\r\n    }\r\n\r\n    const doMint = async (tokenURI, events) => {\r\n        const web3 = window.web3\r\n\r\n        const { onRegistered, onError , onReceipt, onConfirmation } = events\r\n        \r\n        token.methods.mint(account, tokenURI)\r\n            .send({from: account})\r\n            .on('transactionHash', async (hash) => {            \r\n                console.log(\"Seu NFT's foi registrado\")\r\n                await onRegistered(hash)\r\n            })\r\n            .on('receipt', async (receipt) => {\r\n                \r\n                console.log(\"Seu NFT's foi mintado com sucesso\")\r\n\r\n                await onReceipt(receipt)\r\n                await geMyTokensFromBlockchain(token, account)\r\n            })\r\n            .on('confirmation', async (confirmationNumber, receipt) => {                \r\n                console.log(\"Confirmação registrada\");\r\n\r\n                await onConfirmation(confirmationNumber, receipt)\r\n                await geMyTokensFromBlockchain(token, account)                            \r\n            })\r\n            .on('error', async (err) => {\r\n                onError(err.message)\r\n            })       \r\n            \r\n    }\r\n\r\n    return (\r\n        <BlockchainContext.Provider\r\n            value={{\r\n                isLoged: isAuthenticated,\r\n                account,\r\n                balance,\r\n                myTokens,\r\n                geMyTokensFromBlockchain,\r\n                doLogin,\r\n                doMint\r\n            }}\r\n        >\r\n        {children}\r\n        </BlockchainContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useBlockchain() {\r\n    const context = useContext(BlockchainContext);\r\n  \r\n    return context;\r\n  }","D:\\Dev\\dapp-client\\src\\store\\index.js",[],"D:\\Dev\\dapp-client\\src\\components\\GameContainer\\index.js",["47","48"],"import Button from '@restart/ui/esm/Button';\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { useBlockchain } from '../../blockchain';\r\nimport { Creators as MemoryActions } from \"../../store/ducks/memory\";\r\n\r\nimport CardBoard from '../CardBoard';\r\nimport CardListView from '../CardListView';\r\n\r\nconst GameContainer = (props) => {\r\n    \r\n    const { \r\n      isLoged,\r\n      account,\r\n      balance,\r\n      doLogin,\r\n      doMint,\r\n      myTokens,\r\n     } = useBlockchain();\r\n\r\n    const handleLogin =  async () => {\r\n      await doLogin();\r\n    }     \r\n\r\n    const handleOnRegistered = async () => {\r\n      alert(\"Token registrado com sucesso. Sua transação está sendo processada\")               \r\n    }\r\n  \r\n    const handleReceipt = async () => {   \r\n      alert(\"Sua NFT foi mintada com sucesso. Aguardando confirmação\")\r\n    }\r\n  \r\n    const handleConfirmation = async () => {   \r\n    }\r\n  \r\n    const handleError = async (message) => {\r\n        alert(message)\r\n    }\r\n\r\n    const eventHandlers = {\r\n      onRegistered: handleOnRegistered,\r\n      onReceipt: handleReceipt,\r\n      onConfirmation: handleConfirmation,\r\n      onError: handleError\r\n    }\r\n\r\n    const handleOnWonCard = (cardId, cardUrl) => {\r\n      console.log(cardId)\r\n      console.log(cardUrl)\r\n\r\n      doMint(cardUrl, eventHandlers)\r\n\r\n    }    \r\n\r\n    return (\r\n        <Container >\r\n          <Row>\r\n            <h2 className=\"text-center\" style={{padding:\"20px\"}}>Memory Game</h2>\r\n          </Row>    \r\n          {!isLoged ? \r\n            <Row><Button onClick={handleLogin}>Login</Button></Row> :\r\n            <div>\r\n              <Row >   \r\n                <Col md={{ span: 4, offset: 4 }}>\r\n                  <CardBoard {...props} onWonCard={handleOnWonCard}></CardBoard>\r\n                </Col>\r\n              </Row>   \r\n              <Row>\r\n                <CardListView tokens={myTokens}></CardListView>\r\n              </Row>\r\n            </div>\r\n          }\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    memory: state.memory,\r\n  });\r\n  \r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(MemoryActions, dispatch);\r\n  \r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(GameContainer);\r\n  \r\n  ","D:\\Dev\\dapp-client\\src\\store\\ducks\\memory.js",[],"D:\\Dev\\dapp-client\\src\\store\\ducks\\index.js",[],"D:\\Dev\\dapp-client\\src\\components\\CardBoard\\index.js",["49","50"],"import { useEffect } from \"react\"\r\n\r\nconst CardBoard = (props) => {\r\n    const { flipCard, clearChosenCards, setWonCard, onWonCard } = props\r\n    const { cardData, cardsWon, cardsChosenId, cardsChosen } = props.memory\r\n\r\n    const chooseImage = (cardId) => {\r\n        const cardIdStr = cardId.toString()\r\n        \r\n        if(cardsWon.includes(cardIdStr)) {\r\n          return  window.location.origin + '/images/white.png'\r\n        }\r\n        else if(cardsChosenId.includes(cardIdStr)) {\r\n          return cardData[cardIdStr].img\r\n        } else {\r\n          return window.location.origin + '/images/blank.png'\r\n        }\r\n      }\r\n\r\n    const handleOnWonCard = (cardId, cardImage) => {\r\n        if (onWonCard !== undefined){\r\n            const cardUrl = window.location.origin + cardImage            \r\n            onWonCard(cardId, cardUrl)\r\n        }\r\n    }\r\n\r\n    const checkAlreadyWonCard = (cardId)  => \r\n        cardsWon.includes(cardId)\r\n\r\n    const handleFlipCard = (cardId)  => {\r\n        flipCard(cardId)    \r\n    }\r\n\r\n    const checkForMatch = async () => {\r\n        const optionOneId = cardsChosenId[0]\r\n        const optionTwoId = cardsChosenId[1]\r\n    \r\n        if(optionOneId === optionTwoId) {\r\n          alert('Você já selecionou esta imagem!')\r\n        } \r\n        else if (cardsChosen[0] === cardsChosen[1]) {\r\n          alert('Você encontrou uma combinação')\r\n\r\n          setWonCard(optionOneId, optionTwoId)\r\n          //tokenURIs: [...this.state.tokenURIs, CARD_ARRAY[optionOneId].img]\r\n          // cardsWon: [...this.state.cardsWon, optionOneId, optionTwoId],\r\n          handleOnWonCard(optionOneId, cardData[optionOneId].img)\r\n        } else {\r\n          alert('Desculpe, tente novamente')\r\n        }\r\n\r\n        clearChosenCards()\r\n\r\n        if (cardsWon.length === cardData.length) {\r\n          alert('Parabéns! Você encontrou todos eles!')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let alreadyChosen = cardsChosen.length\r\n        if (alreadyChosen === 2) {\r\n            checkForMatch()    \r\n        }          \r\n    }, [cardsChosen])\r\n\r\n    return (\r\n        cardData.map((card, key) => {\r\n            return(\r\n              <img\r\n                key={key}\r\n                src={chooseImage(key)}\r\n                data-id={key}\r\n                onClick={(event) => {\r\n                  let cardId = event.target.getAttribute('data-id')\r\n\r\n                  if(!checkAlreadyWonCard(cardId)) {\r\n                    handleFlipCard(cardId)\r\n                  }\r\n\r\n                }}\r\n              />\r\n            )\r\n          }\r\n    ))\r\n}\r\n\r\nexport default CardBoard\r\n","D:\\Dev\\dapp-client\\src\\components\\CardListView\\index.js",["51"],"\nconst CardListView = (props) => {\n\n    const {tokens} = props\n    \n    return (\n        <div>\n            <h5>Tokens Collected:<span id=\"result\">&nbsp;{tokens.length}</span></h5>\n\n            <div className=\"grid mb-4\" >\n\n            { tokens.map((tokenURI, key) => {\n                return(\n                <img\n                    key={key}\n                    src={tokenURI}\n                />\n                )\n            })}\n\n            </div>        \n        </div>\n    )\n}\n\n\nexport default CardListView",{"ruleId":"52","severity":1,"message":"53","line":93,"column":15,"nodeType":"54","messageId":"55","endLine":93,"endColumn":19},{"ruleId":"52","severity":1,"message":"56","line":15,"column":7,"nodeType":"54","messageId":"55","endLine":15,"endColumn":14},{"ruleId":"52","severity":1,"message":"57","line":16,"column":7,"nodeType":"54","messageId":"55","endLine":16,"endColumn":14},{"ruleId":"58","severity":1,"message":"59","line":64,"column":8,"nodeType":"60","endLine":64,"endColumn":21,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":69,"column":15,"nodeType":"64","endLine":81,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":14,"column":17,"nodeType":"64","endLine":17,"endColumn":19},"no-unused-vars","'web3' is assigned a value but never used.","Identifier","unusedVar","'account' is assigned a value but never used.","'balance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkForMatch'. Either include it or remove the dependency array.","ArrayExpression",["65"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"66","fix":"67"},"Update the dependencies array to be: [cardsChosen, checkForMatch]",{"range":"68","text":"69"},[2055,2068],"[cardsChosen, checkForMatch]"]